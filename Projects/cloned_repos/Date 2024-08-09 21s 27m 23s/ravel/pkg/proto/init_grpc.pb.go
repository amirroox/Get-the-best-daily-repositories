// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pkg/proto/init.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InitServiceClient is the client API for InitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitServiceClient interface {
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	Signal(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Follow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (InitService_FollowClient, error)
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitStatus, error)
}

type initServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInitServiceClient(cc grpc.ClientConnInterface) InitServiceClient {
	return &initServiceClient{cc}
}

func (c *initServiceClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/proto.InitService/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initServiceClient) Signal(ctx context.Context, in *SignalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.InitService/Signal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initServiceClient) Follow(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (InitService_FollowClient, error) {
	stream, err := c.cc.NewStream(ctx, &InitService_ServiceDesc.Streams[0], "/proto.InitService/Follow", opts...)
	if err != nil {
		return nil, err
	}
	x := &initServiceFollowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InitService_FollowClient interface {
	Recv() (*InitStatus, error)
	grpc.ClientStream
}

type initServiceFollowClient struct {
	grpc.ClientStream
}

func (x *initServiceFollowClient) Recv() (*InitStatus, error) {
	m := new(InitStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *initServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitStatus, error) {
	out := new(InitStatus)
	err := c.cc.Invoke(ctx, "/proto.InitService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitServiceServer is the server API for InitService service.
// All implementations should embed UnimplementedInitServiceServer
// for forward compatibility
type InitServiceServer interface {
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Signal(context.Context, *SignalRequest) (*emptypb.Empty, error)
	Follow(*emptypb.Empty, InitService_FollowServer) error
	HealthCheck(context.Context, *emptypb.Empty) (*InitStatus, error)
}

// UnimplementedInitServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInitServiceServer struct {
}

func (UnimplementedInitServiceServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedInitServiceServer) Signal(context.Context, *SignalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signal not implemented")
}
func (UnimplementedInitServiceServer) Follow(*emptypb.Empty, InitService_FollowServer) error {
	return status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedInitServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*InitStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

// UnsafeInitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitServiceServer will
// result in compilation errors.
type UnsafeInitServiceServer interface {
	mustEmbedUnimplementedInitServiceServer()
}

func RegisterInitServiceServer(s grpc.ServiceRegistrar, srv InitServiceServer) {
	s.RegisterService(&InitService_ServiceDesc, srv)
}

func _InitService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InitService/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServiceServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitService_Signal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServiceServer).Signal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InitService/Signal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServiceServer).Signal(ctx, req.(*SignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitService_Follow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InitServiceServer).Follow(m, &initServiceFollowServer{stream})
}

type InitService_FollowServer interface {
	Send(*InitStatus) error
	grpc.ServerStream
}

type initServiceFollowServer struct {
	grpc.ServerStream
}

func (x *initServiceFollowServer) Send(m *InitStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _InitService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InitService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// InitService_ServiceDesc is the grpc.ServiceDesc for InitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InitService",
	HandlerType: (*InitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _InitService_Exec_Handler,
		},
		{
			MethodName: "Signal",
			Handler:    _InitService_Signal_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _InitService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Follow",
			Handler:       _InitService_Follow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/init.proto",
}
